{"mappings":"ACAA,SAAS,gBAAgB,CAAC,mBAAoB,KAC5C,IAAM,EAAe,SAAS,cAAc,CAAC,iBACvC,EAAgB,SAAS,cAAc,CAAC,oBACxC,EAAoB,SAAS,cAAc,CAAC,uBAC5C,EAAoB,SAAS,cAAc,CAAC,mBAC5C,EAAc,SAAS,cAAc,CAAC,WAEtC,EAAe,sBAaf,EAAe,KACnB,IAAM,EAAW,CACf,gBAAiB,EAAc,KAAK,CAAC,IAAI,GACzC,eAAgB,EAAkB,OAAO,CACzC,OAAQ,EAAY,KAAK,CAAC,IAAI,EAChC,EACA,aAAa,OAAO,CAAC,EAAc,KAAK,SAAS,CAAC,IAClD,MAAM,+BACR,CAGI,CAAA,GACF,EAAa,gBAAgB,CAAC,SAAU,AAAC,IACvC,EAAM,cAAc,GACpB,GACF,GAIE,GACF,EAAkB,gBAAgB,CAAC,QAAS,KAC1C,EAAc,KAAK,CAAG,GACtB,IACA,MAAM,8DACR,GAIF,AAtCqB,CAAA,KACnB,IAAM,EAAgB,KAAK,KAAK,CAAC,aAAa,OAAO,CAAC,IAClD,IACF,EAAc,KAAK,CAAG,EAAc,eAAe,EAAI,GACvD,EAAkB,OAAO,CAAG,EAAc,cAAc,EAAI,CAAA,EAC5D,EAAY,KAAK,CAAG,EAAc,MAAM,EAAI,GAEhD,CAAA,GAgCF","sources":["<anon>","src/assets/js/settings.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', ()=>{\n    const settingsForm = document.getElementById('settings-form');\n    const locationInput = document.getElementById('default-location');\n    const deleteLocationBtn = document.getElementById('delete-location-btn');\n    const geolocationToggle = document.getElementById('use-geolocation');\n    const apiKeyInput = document.getElementById('api-key');\n    const SETTINGS_KEY = 'weatherDashSettings';\n    // Function to load settings from localStorage\n    const loadSettings = ()=>{\n        const savedSettings = JSON.parse(localStorage.getItem(SETTINGS_KEY));\n        if (savedSettings) {\n            locationInput.value = savedSettings.defaultLocation || '';\n            geolocationToggle.checked = savedSettings.useGeolocation || false;\n            apiKeyInput.value = savedSettings.apiKey || '';\n        }\n    };\n    // Function to save settings to localStorage\n    const saveSettings = ()=>{\n        const settings = {\n            defaultLocation: locationInput.value.trim(),\n            useGeolocation: geolocationToggle.checked,\n            apiKey: apiKeyInput.value.trim()\n        };\n        localStorage.setItem(SETTINGS_KEY, JSON.stringify(settings));\n        alert('Settings saved successfully!');\n    };\n    // Event listener for form submission\n    if (settingsForm) settingsForm.addEventListener('submit', (event)=>{\n        event.preventDefault();\n        saveSettings();\n    });\n    // Event listener for the delete location button\n    if (deleteLocationBtn) deleteLocationBtn.addEventListener('click', ()=>{\n        locationInput.value = '';\n        saveSettings();\n        alert('Default location cleared. Click \"Save Settings\" to confirm.');\n    });\n    // Load the settings when the page is ready\n    loadSettings();\n});\n\n//# sourceMappingURL=settings.470cee01.js.map\n","document.addEventListener('DOMContentLoaded', () => {\n  const settingsForm = document.getElementById('settings-form');\n  const locationInput = document.getElementById('default-location');\n  const deleteLocationBtn = document.getElementById('delete-location-btn');\n  const geolocationToggle = document.getElementById('use-geolocation');\n  const apiKeyInput = document.getElementById('api-key');\n\n  const SETTINGS_KEY = 'weatherDashSettings';\n\n  // Function to load settings from localStorage\n  const loadSettings = () => {\n    const savedSettings = JSON.parse(localStorage.getItem(SETTINGS_KEY));\n    if (savedSettings) {\n      locationInput.value = savedSettings.defaultLocation || '';\n      geolocationToggle.checked = savedSettings.useGeolocation || false;\n      apiKeyInput.value = savedSettings.apiKey || '';\n    }\n  };\n\n  // Function to save settings to localStorage\n  const saveSettings = () => {\n    const settings = {\n      defaultLocation: locationInput.value.trim(),\n      useGeolocation: geolocationToggle.checked,\n      apiKey: apiKeyInput.value.trim(),\n    };\n    localStorage.setItem(SETTINGS_KEY, JSON.stringify(settings));\n    alert('Settings saved successfully!');\n  };\n\n  // Event listener for form submission\n  if (settingsForm) {\n    settingsForm.addEventListener('submit', (event) => {\n      event.preventDefault();\n      saveSettings();\n    });\n  }\n\n  // Event listener for the delete location button\n  if (deleteLocationBtn) {\n    deleteLocationBtn.addEventListener('click', () => {\n      locationInput.value = '';\n      saveSettings();\n      alert('Default location cleared. Click \"Save Settings\" to confirm.');\n    });\n  }\n\n  // Load the settings when the page is ready\n  loadSettings();\n});\n"],"names":["document","addEventListener","settingsForm","getElementById","locationInput","deleteLocationBtn","geolocationToggle","apiKeyInput","SETTINGS_KEY","saveSettings","settings","defaultLocation","value","trim","useGeolocation","checked","apiKey","localStorage","setItem","JSON","stringify","alert","event","preventDefault","loadSettings","savedSettings","parse","getItem"],"version":3,"file":"settings.470cee01.js.map"}