{"mappings":"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","sources":["<anon>","src/assets/js/weather-dashboard.js"],"sourcesContent":["document.addEventListener(\"DOMContentLoaded\", ()=>{\n    // DOM Elements\n    const modal = document.getElementById('search-modal');\n    const openModalButton = document.getElementById('search-modal-trigger');\n    const closeModalButton = document.getElementById('modal-close-button');\n    const cancelButton = document.getElementById('modal-cancel-button');\n    const cityInput = document.getElementById('city-input');\n    const getWeatherButton = document.getElementById('get-weather-button');\n    // UI Elements to Update\n    const cityNameElement = document.getElementById('city-name');\n    const weatherDescElement = document.querySelector('.weather-description');\n    const currentTempElement = document.querySelector('.current-temp');\n    const feelsLikeElement = document.querySelector('.feels-like');\n    const windStatusElement = document.getElementById('wind-status');\n    const sunriseElement = document.getElementById('sunrise-time');\n    const sunsetElement = document.getElementById('sunset-time');\n    const forecastListElement = document.getElementById('forecast-list');\n    const glassRect = document.querySelector('.glass-rectangle');\n    const dashboardContainer = document.querySelector('.dashboard-container');\n    // App State & Config\n    const SETTINGS_KEY = 'weatherDashSettings';\n    let API_KEY = '';\n    // Show an error message (could be improved with a dedicated UI element)\n    const showError = (message)=>{\n        console.error(message);\n        cityNameElement.textContent = \"Error\";\n        weatherDescElement.textContent = message;\n    };\n    // Load settings from localStorage\n    const loadAppSettings = ()=>{\n        const savedSettings = JSON.parse(localStorage.getItem(SETTINGS_KEY));\n        if (savedSettings && savedSettings.apiKey) {\n            API_KEY = savedSettings.apiKey;\n            return savedSettings;\n        }\n        showError(\"API Key not found. Please set it in the Settings page.\");\n        return null;\n    };\n    // Update the main weather display\n    const updateCurrentWeather = (data)=>{\n        const { name, main, weather, wind, sys } = data;\n        cityNameElement.textContent = name;\n        weatherDescElement.textContent = weather[0].description.replace(/\\b\\w/g, (l)=>l.toUpperCase()); // Capitalize\n        currentTempElement.textContent = `${Math.round(main.temp)}\\xb0C`;\n        feelsLikeElement.textContent = `Feels like ${Math.round(main.feels_like)}\\xb0C`;\n        windStatusElement.textContent = `${wind.speed.toFixed(1)} km/h`;\n        // Format sunrise/sunset times\n        const sunriseTime = new Date(sys.sunrise * 1000).toLocaleTimeString('en-GB', {\n            hour: '2-digit',\n            minute: '2-digit'\n        });\n        const sunsetTime = new Date(sys.sunset * 1000).toLocaleTimeString('en-GB', {\n            hour: '2-digit',\n            minute: '2-digit'\n        });\n        sunriseElement.textContent = `Sunrise: ${sunriseTime}`;\n        sunsetElement.textContent = `Sunset: ${sunsetTime}`;\n        updateBackground(weather[0], sys.sunrise, sys.sunset);\n    };\n    // Update the 5-day forecast display\n    const updateForecast = (data)=>{\n        forecastListElement.innerHTML = ''; // Clear previous forecast\n        // Filter to get one forecast per day (around midday)\n        const dailyForecasts = data.list.filter((item)=>item.dt_txt.includes(\"12:00:00\"));\n        dailyForecasts.forEach((forecast)=>{\n            const day = new Date(forecast.dt * 1000).toLocaleDateString('en-GB', {\n                weekday: 'short'\n            });\n            const temp = `${Math.round(forecast.main.temp)}\\xb0C`;\n            const iconClass = getWeatherIcon(forecast.weather[0].icon);\n            const forecastItem = document.createElement('div');\n            forecastItem.className = 'forecast-item';\n            forecastItem.innerHTML = `\n        <p class=\"forecast-day\">${day}</p>\n        <i class=\"forecast-icon ${iconClass}\"></i>\n        <p class=\"forecast-temp\">${temp}</p>\n      `;\n            forecastListElement.appendChild(forecastItem);\n        });\n    };\n    // Map OpenWeatherMap icon codes to Font Awesome icons\n    const getWeatherIcon = (iconCode)=>{\n        const iconMap = {\n            '01d': 'fas fa-sun',\n            '01n': 'fas fa-moon',\n            '02d': 'fas fa-cloud-sun',\n            '02n': 'fas fa-cloud-moon',\n            '03d': 'fas fa-cloud',\n            '03n': 'fas fa-cloud',\n            '04d': 'fas fa-cloud-meatball',\n            '04n': 'fas fa-cloud-meatball',\n            '09d': 'fas fa-cloud-showers-heavy',\n            '09n': 'fas fa-cloud-showers-heavy',\n            '10d': 'fas fa-cloud-sun-rain',\n            '10n': 'fas fa-cloud-moon-rain',\n            '11d': 'fas fa-bolt',\n            '11n': 'fas fa-bolt',\n            '13d': 'fas fa-snowflake',\n            '13n': 'fas fa-snowflake',\n            '50d': 'fas fa-smog',\n            '50n': 'fas fa-smog'\n        };\n        return iconMap[iconCode] || 'fas fa-question-circle'; // Default icon\n    };\n    // Update the background based on weather and time of day\n    const updateBackground = (weather, sunrise, sunset)=>{\n        const condition = weather.main.toLowerCase();\n        const now = Date.now() / 1000; // Current time in seconds\n        const isDay = now > sunrise && now < sunset;\n        const backgroundClasses = [\n            'sunny',\n            'cloudy',\n            'partly-cloudy',\n            'stormy'\n        ];\n        glassRect.classList.remove(...backgroundClasses);\n        dashboardContainer.classList.remove(...backgroundClasses);\n        let bgClass = '';\n        if (condition.includes('storm') || condition.includes('thunder')) bgClass = 'stormy';\n        else if (condition.includes('cloud')) bgClass = weather.id === 801 ? 'partly-cloudy' : 'cloudy'; // 801 is 'few clouds'\n        else if (condition.includes('clear')) bgClass = 'sunny';\n        if (bgClass) {\n            glassRect.classList.add(bgClass);\n            dashboardContainer.classList.add(bgClass);\n        }\n    };\n    // Fetch all weather data for a given city\n    const fetchWeatherData = async (city)=>{\n        if (!API_KEY) {\n            showError(\"API Key is missing. Please configure it in settings.\");\n            return;\n        }\n        cityNameElement.textContent = `Loading data for ${city}...`;\n        weatherDescElement.textContent = 'Please wait...';\n        try {\n            // Get coordinates for the city\n            const geoUrl = `https://api.openweathermap.org/geo/1.0/direct?q=${city}&limit=1&appid=${API_KEY}`;\n            const geoResponse = await fetch(geoUrl);\n            if (!geoResponse.ok) throw new Error('Failed to fetch location data.');\n            const geoData = await geoResponse.json();\n            if (geoData.length === 0) throw new Error(`Could not find location: ${city}`);\n            const { lat, lon } = geoData[0];\n            // Fetch current weather and forecast in parallel for efficiency\n            const currentWeatherUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`;\n            const forecastUrl = `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`;\n            const [currentWeatherResponse, forecastResponse] = await Promise.all([\n                fetch(currentWeatherUrl),\n                fetch(forecastUrl)\n            ]);\n            if (!currentWeatherResponse.ok || !forecastResponse.ok) throw new Error('Failed to fetch weather data.');\n            const currentWeatherData = await currentWeatherResponse.json();\n            const forecastData = await forecastResponse.json();\n            // Update the UI with the fetched data\n            updateCurrentWeather(currentWeatherData);\n            updateForecast(forecastData);\n        } catch (error) {\n            showError(error.message);\n        }\n    };\n    // Modal Logic\n    const openModal = ()=>{\n        if (modal) {\n            modal.classList.remove('hidden');\n            modal.classList.add('flex');\n            setTimeout(()=>cityInput.focus(), 100);\n        }\n    };\n    const closeModal = ()=>{\n        if (modal) {\n            modal.classList.add('hidden');\n            modal.classList.remove('flex');\n        }\n    };\n    // Event Listeners\n    if (openModalButton) openModalButton.addEventListener('click', (e)=>{\n        e.preventDefault();\n        openModal();\n    });\n    if (closeModalButton) closeModalButton.addEventListener('click', closeModal);\n    if (cancelButton) cancelButton.addEventListener('click', closeModal);\n    if (modal) modal.addEventListener('click', (e)=>{\n        if (e.target === modal) closeModal();\n    });\n    document.addEventListener('keydown', (e)=>{\n        if (e.key === 'Escape' && !modal.classList.contains('hidden')) closeModal();\n    });\n    const handleSearch = ()=>{\n        const cityName = cityInput.value.trim();\n        if (cityName) {\n            fetchWeatherData(cityName);\n            closeModal();\n            cityInput.value = '';\n        } else cityInput.focus();\n    };\n    if (getWeatherButton) getWeatherButton.addEventListener('click', handleSearch);\n    if (cityInput) cityInput.addEventListener('keyup', (e)=>{\n        if (e.key === 'Enter') handleSearch();\n    });\n    // Initial Load\n    const settings = loadAppSettings();\n    if (settings) {\n        if (settings.useGeolocation) navigator.geolocation.getCurrentPosition((position)=>{\n            const { latitude, longitude } = position.coords;\n            fetchWeatherData(`lat=${latitude}&lon=${longitude}`); // A bit of a hack, but the geo API can handle this\n        }, (error)=>{\n            console.warn(\"Geolocation denied. Falling back to default location.\", error);\n            if (settings.defaultLocation) fetchWeatherData(settings.defaultLocation);\n        });\n        else if (settings.defaultLocation) fetchWeatherData(settings.defaultLocation);\n    }\n});\n\n//# sourceMappingURL=weather-dashboard.4a3986e2.js.map\n","document.addEventListener(\"DOMContentLoaded\", () => {\n  // DOM Elements\n  const modal = document.getElementById('search-modal');\n  const openModalButton = document.getElementById('search-modal-trigger');\n  const closeModalButton = document.getElementById('modal-close-button');\n  const cancelButton = document.getElementById('modal-cancel-button');\n  const cityInput = document.getElementById('city-input');\n  const getWeatherButton = document.getElementById('get-weather-button');\n\n  // UI Elements to Update\n  const cityNameElement = document.getElementById('city-name');\n  const weatherDescElement = document.querySelector('.weather-description');\n  const currentTempElement = document.querySelector('.current-temp');\n  const feelsLikeElement = document.querySelector('.feels-like');\n  const windStatusElement = document.getElementById('wind-status');\n  const sunriseElement = document.getElementById('sunrise-time');\n  const sunsetElement = document.getElementById('sunset-time');\n  const forecastListElement = document.getElementById('forecast-list');\n  const glassRect = document.querySelector('.glass-rectangle');\n  const dashboardContainer = document.querySelector('.dashboard-container');\n\n  // App State & Config\n  const SETTINGS_KEY = 'weatherDashSettings';\n  let API_KEY = '';\n\n\n  // Show an error message (could be improved with a dedicated UI element)\n  const showError = (message) => {\n    console.error(message);\n    cityNameElement.textContent = \"Error\";\n    weatherDescElement.textContent = message;\n  };\n\n  // Load settings from localStorage\n  const loadAppSettings = () => {\n    const savedSettings = JSON.parse(localStorage.getItem(SETTINGS_KEY));\n    if (savedSettings && savedSettings.apiKey) {\n      API_KEY = savedSettings.apiKey;\n      return savedSettings;\n    }\n    showError(\"API Key not found. Please set it in the Settings page.\");\n    return null;\n  };\n\n  // Update the main weather display\n  const updateCurrentWeather = (data) => {\n    const { name, main, weather, wind, sys } = data;\n    cityNameElement.textContent = name;\n    weatherDescElement.textContent = weather[0].description.replace(/\\b\\w/g, l => l.toUpperCase()); // Capitalize\n    currentTempElement.textContent = `${Math.round(main.temp)}°C`;\n    feelsLikeElement.textContent = `Feels like ${Math.round(main.feels_like)}°C`;\n    windStatusElement.textContent = `${wind.speed.toFixed(1)} km/h`;\n\n    // Format sunrise/sunset times\n    const sunriseTime = new Date(sys.sunrise * 1000).toLocaleTimeString('en-GB', { hour: '2-digit', minute: '2-digit' });\n    const sunsetTime = new Date(sys.sunset * 1000).toLocaleTimeString('en-GB', { hour: '2-digit', minute: '2-digit' });\n    sunriseElement.textContent = `Sunrise: ${sunriseTime}`;\n    sunsetElement.textContent = `Sunset: ${sunsetTime}`;\n\n    updateBackground(weather[0], sys.sunrise, sys.sunset);\n  };\n\n  // Update the 5-day forecast display\n  const updateForecast = (data) => {\n    forecastListElement.innerHTML = ''; // Clear previous forecast\n\n    // Filter to get one forecast per day (around midday)\n    const dailyForecasts = data.list.filter(item => item.dt_txt.includes(\"12:00:00\"));\n\n    dailyForecasts.forEach(forecast => {\n      const day = new Date(forecast.dt * 1000).toLocaleDateString('en-GB', { weekday: 'short' });\n      const temp = `${Math.round(forecast.main.temp)}°C`;\n      const iconClass = getWeatherIcon(forecast.weather[0].icon);\n\n      const forecastItem = document.createElement('div');\n      forecastItem.className = 'forecast-item';\n      forecastItem.innerHTML = `\n        <p class=\"forecast-day\">${day}</p>\n        <i class=\"forecast-icon ${iconClass}\"></i>\n        <p class=\"forecast-temp\">${temp}</p>\n      `;\n      forecastListElement.appendChild(forecastItem);\n    });\n  };\n\n  // Map OpenWeatherMap icon codes to Font Awesome icons\n  const getWeatherIcon = (iconCode) => {\n    const iconMap = {\n      '01d': 'fas fa-sun', '01n': 'fas fa-moon',\n      '02d': 'fas fa-cloud-sun', '02n': 'fas fa-cloud-moon',\n      '03d': 'fas fa-cloud', '03n': 'fas fa-cloud',\n      '04d': 'fas fa-cloud-meatball', '04n': 'fas fa-cloud-meatball',\n      '09d': 'fas fa-cloud-showers-heavy', '09n': 'fas fa-cloud-showers-heavy',\n      '10d': 'fas fa-cloud-sun-rain', '10n': 'fas fa-cloud-moon-rain',\n      '11d': 'fas fa-bolt', '11n': 'fas fa-bolt',\n      '13d': 'fas fa-snowflake', '13n': 'fas fa-snowflake',\n      '50d': 'fas fa-smog', '50n': 'fas fa-smog',\n    };\n    return iconMap[iconCode] || 'fas fa-question-circle'; // Default icon\n  };\n\n  // Update the background based on weather and time of day\n  const updateBackground = (weather, sunrise, sunset) => {\n    const condition = weather.main.toLowerCase();\n    const now = Date.now() / 1000; // Current time in seconds\n    const isDay = now > sunrise && now < sunset;\n\n    const backgroundClasses = ['sunny', 'cloudy', 'partly-cloudy', 'stormy'];\n    glassRect.classList.remove(...backgroundClasses);\n    dashboardContainer.classList.remove(...backgroundClasses);\n\n    let bgClass = '';\n    if (condition.includes('storm') || condition.includes('thunder')) {\n      bgClass = 'stormy';\n    } else if (condition.includes('cloud')) {\n      bgClass = weather.id === 801 ? 'partly-cloudy' : 'cloudy'; // 801 is 'few clouds'\n    } else if (condition.includes('clear')) {\n      bgClass = 'sunny';\n    }\n\n    if (bgClass) {\n      glassRect.classList.add(bgClass);\n      dashboardContainer.classList.add(bgClass);\n    }\n  };\n\n  // Fetch all weather data for a given city\n  const fetchWeatherData = async (city) => {\n    if (!API_KEY) {\n      showError(\"API Key is missing. Please configure it in settings.\");\n      return;\n    }\n    cityNameElement.textContent = `Loading data for ${city}...`;\n    weatherDescElement.textContent = 'Please wait...';\n\n    try {\n      // Get coordinates for the city\n      const geoUrl = `https://api.openweathermap.org/geo/1.0/direct?q=${city}&limit=1&appid=${API_KEY}`;\n      const geoResponse = await fetch(geoUrl);\n      if (!geoResponse.ok) throw new Error('Failed to fetch location data.');\n      const geoData = await geoResponse.json();\n      if (geoData.length === 0) {\n        throw new Error(`Could not find location: ${city}`);\n      }\n      const { lat, lon } = geoData[0];\n\n      // Fetch current weather and forecast in parallel for efficiency\n      const currentWeatherUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`;\n      const forecastUrl = `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`;\n\n      const [currentWeatherResponse, forecastResponse] = await Promise.all([\n        fetch(currentWeatherUrl),\n        fetch(forecastUrl)\n      ]);\n\n      if (!currentWeatherResponse.ok || !forecastResponse.ok) {\n        throw new Error('Failed to fetch weather data.');\n      }\n\n      const currentWeatherData = await currentWeatherResponse.json();\n      const forecastData = await forecastResponse.json();\n\n      // Update the UI with the fetched data\n      updateCurrentWeather(currentWeatherData);\n      updateForecast(forecastData);\n\n    } catch (error) {\n      showError(error.message);\n    }\n  };\n\n  // Modal Logic\n  const openModal = () => {\n    if (modal) {\n      modal.classList.remove('hidden');\n      modal.classList.add('flex');\n      setTimeout(() => cityInput.focus(), 100);\n    }\n  };\n\n  const closeModal = () => {\n    if (modal) {\n      modal.classList.add('hidden');\n      modal.classList.remove('flex');\n    }\n  };\n\n  // Event Listeners\n  if (openModalButton) openModalButton.addEventListener('click', (e) => { e.preventDefault(); openModal(); });\n  if (closeModalButton) closeModalButton.addEventListener('click', closeModal);\n  if (cancelButton) cancelButton.addEventListener('click', closeModal);\n  if (modal) modal.addEventListener('click', (e) => { if (e.target === modal) closeModal(); });\n  document.addEventListener('keydown', (e) => {\n    if (e.key === 'Escape' && !modal.classList.contains('hidden')) closeModal();\n  });\n\n  const handleSearch = () => {\n    const cityName = cityInput.value.trim();\n    if (cityName) {\n      fetchWeatherData(cityName);\n      closeModal();\n      cityInput.value = '';\n    } else {\n      cityInput.focus();\n    }\n  };\n\n  if (getWeatherButton) getWeatherButton.addEventListener('click', handleSearch);\n  if (cityInput) cityInput.addEventListener('keyup', (e) => { if (e.key === 'Enter') handleSearch(); });\n\n  // Initial Load\n  const settings = loadAppSettings();\n  if (settings) {\n    if (settings.useGeolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          const { latitude, longitude } = position.coords;\n          fetchWeatherData(`lat=${latitude}&lon=${longitude}`); // A bit of a hack, but the geo API can handle this\n        },\n        (error) => {\n          console.warn(\"Geolocation denied. Falling back to default location.\", error);\n          if (settings.defaultLocation) {\n            fetchWeatherData(settings.defaultLocation);\n          }\n        }\n      );\n    } else if (settings.defaultLocation) {\n      fetchWeatherData(settings.defaultLocation);\n    }\n  }\n});\n"],"names":["document","addEventListener","modal","getElementById","openModalButton","closeModalButton","cancelButton","cityInput","getWeatherButton","cityNameElement","weatherDescElement","querySelector","currentTempElement","feelsLikeElement","windStatusElement","sunriseElement","sunsetElement","forecastListElement","glassRect","dashboardContainer","API_KEY","showError","message","console","error","textContent","fetchWeatherData","city","geoUrl","geoResponse","fetch","ok","Error","geoData","json","length","lat","lon","currentWeatherUrl","forecastUrl","currentWeatherResponse","forecastResponse","Promise","all","currentWeatherData","forecastData","updateCurrentWeather","data","name","main","weather","wind","sys","description","replace","l","toUpperCase","Math","round","temp","feels_like","speed","toFixed","sunriseTime","Date","sunrise","toLocaleTimeString","hour","minute","sunsetTime","sunset","updateBackground","condition","toLowerCase","now","backgroundClasses","classList","remove","bgClass","includes","id","add","innerHTML","dailyForecasts","list","filter","item","dt_txt","forEach","forecast","day","dt","toLocaleDateString","weekday","iconClass","iconMap","icon","forecastItem","createElement","className","appendChild","closeModal","e","preventDefault","setTimeout","focus","target","key","contains","handleSearch","cityName","value","trim","settings","loadAppSettings","savedSettings","JSON","parse","localStorage","getItem","apiKey","useGeolocation","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","warn","defaultLocation"],"version":3,"file":"weather-dashboard.4a3986e2.js.map"}