{"mappings":"ACAA,SAAS,gBAAgB,CAAC,mBAAoB,AAAC,IAE7C,IAAM,EAAQ,SAAS,cAAc,CAAC,gBACnB,SAAS,cAAc,CAAC,eAC3C,IAAM,EAAkB,SAAS,cAAc,CAAC,wBAC1C,EAAmB,SAAS,cAAc,CAAC,sBAC3C,EAAe,SAAS,cAAc,CAAC,uBACvC,EAAY,SAAS,cAAc,CAAC,cACpC,EAAmB,SAAS,cAAc,CAAC,sBAG/B,SAAS,aAAa,CAAC,oBACd,SAAS,aAAa,CAAC,wBAGlD,IAAM,EAAyB,SAAS,cAAc,CAAC,qBAEvD,SAAS,IACP,IAAM,EAAM,IAAI,KAIV,EAAgB,EAAI,kBAAkB,CAAC,QADzB,CAAC,MAAO,OAAQ,IAAK,UAAW,KAAM,SAAS,GAK7D,EAAgB,EAAI,kBAAkB,CAAC,QADzB,CAAC,KAAM,UAAW,OAAQ,UAAW,OAAQ,UAAW,OAAQ,CAAA,CAAI,EAGpF,CAAA,GACF,CAAA,EAAuB,WAAW,CAAG,CAAA,EAAG,EAAc,GAAG,EAAE,EAAA,CAAe,AAAf,CAE/D,CAGA,IAEA,YAAY,EAAgB,KAE5B,IAAM,EAAW,SAAS,aAAa,CAAC,cAEpC,IAGF,AAF0B,EAAS,aAAa,CAAC,wBAE/B,gBAAgB,CAAC,QAAS,AAAC,IAE3C,EAAM,eAAe,GAErB,EAAS,SAAS,CAAC,MAAM,CAAC,SAC5B,GAGA,SAAS,gBAAgB,CAAC,QAAS,KAC7B,EAAS,SAAS,CAAC,QAAQ,CAAC,WAC9B,EAAS,SAAS,CAAC,MAAM,CAAC,SAE9B,GAGA,SAAS,gBAAgB,CAAC,UAAW,AAAC,IAChC,AAAc,WAAd,EAAM,GAAG,EAAiB,EAAS,SAAS,CAAC,QAAQ,CAAC,WACxD,EAAS,SAAS,CAAC,MAAM,CAAC,SAE9B,IAaF,IAAM,EAAa,KACb,IACF,EAAM,SAAS,CAAC,GAAG,CAAC,UACpB,EAAM,SAAS,CAAC,MAAM,CAAC,QAE3B,CAGI,CAAA,GACF,EAAgB,gBAAgB,CAAC,QAAS,AAAC,IACzC,EAAM,cAAc,GAlBlB,IACF,EAAM,SAAS,CAAC,MAAM,CAAC,UACvB,EAAM,SAAS,CAAC,GAAG,CAAC,QAEpB,WAAW,IAAM,EAAU,KAAK,GAAI,KAgBtC,GAIE,GACF,EAAiB,gBAAgB,CAAC,QAAS,GAIzC,GACF,EAAa,gBAAgB,CAAC,QAAS,GAIrC,GACF,EAAM,gBAAgB,CAAC,QAAS,AAAC,IAE3B,EAAM,MAAM,GAAK,GACnB,GAEJ,GAIF,SAAS,gBAAgB,CAAC,UAAW,AAAC,IAChC,AAAc,WAAd,EAAM,GAAG,EAAkB,EAAM,SAAS,CAAC,QAAQ,CAAC,WACtD,GAEJ,GAGI,GACF,EAAiB,gBAAgB,CAAC,QAAS,KACzC,IAAM,EAAW,EAAU,KAAK,CAAC,IAAI,GACjC,GAEF,QAAQ,GAAG,CAAC,CAAC,sBAAsB,EAAE,EAAA,CAAU,EAE/C,IAEA,EAAU,KAAK,CAAG,KAGlB,QAAQ,GAAG,CAAC,uBACZ,EAAU,KAAK,GAEnB,GAMgE,KAGQ,IAAW,IAcrF,IAAI,EAAa,aAAa,OAAO,CAAC,sBAAwB,CAC9D,CAAA,IACA,aAAa,OAAO,CAAC,oBAAqB,GAC1C,SAAS,cAAc,CAAC,cAAc,WAAW,CAAG,CACtD","sources":["<anon>","src/assets/js/weather-dashboard.js"],"sourcesContent":["document.addEventListener(\"DOMContentLoaded\", (event)=>{\n    // Modal Elements\n    const modal = document.getElementById('search-modal');\n    const modalPanel = document.getElementById('modal-panel');\n    const openModalButton = document.getElementById('search-modal-trigger');\n    const closeModalButton = document.getElementById('modal-close-button');\n    const cancelButton = document.getElementById('modal-cancel-button');\n    const cityInput = document.getElementById('city-input');\n    const getWeatherButton = document.getElementById('get-weather-button');\n    // Weather space\n    const glassRect = document.querySelector('.glass-rectangle');\n    const dashboardContainer = document.querySelector('.dashboard-container');\n    // Date and Time Display\n    const currentDateTimeElement = document.getElementById('current-date-time');\n    function updateDateTime() {\n        const now = new Date();\n        // Format the date: e.g., \"July 12, 2025\"\n        const dateOptions = {\n            month: 'long',\n            day: 'numeric',\n            year: 'numeric'\n        };\n        const formattedDate = now.toLocaleDateString('en-GB', dateOptions);\n        // Format the time: e.g., \"03:30\"\n        const timeOptions = {\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit',\n            hour24: true\n        };\n        const formattedTime = now.toLocaleTimeString('en-GB', timeOptions);\n        if (currentDateTimeElement) currentDateTimeElement.textContent = `${formattedDate} | ${formattedTime}`;\n    }\n    // Update the time immediately when the page loads\n    updateDateTime();\n    // Then, update the time every second (1000 milliseconds)\n    setInterval(updateDateTime, 1000);\n    const userMenu = document.querySelector('.user-menu');\n    if (userMenu) {\n        const userProfileButton = userMenu.querySelector('.user-profile-button');\n        userProfileButton.addEventListener('click', (event)=>{\n            // Stop the click from bubbling up to the document, which would close the menu\n            event.stopPropagation();\n            // Toggle the 'active' class to show/hide the dropdown\n            userMenu.classList.toggle('active');\n        });\n        // Add a listener to the whole document to close the menu if you click elsewhere\n        document.addEventListener('click', ()=>{\n            if (userMenu.classList.contains('active')) userMenu.classList.remove('active');\n        });\n        // Optional but recommended: Close the dropdown with the 'Escape' key\n        document.addEventListener('keydown', (event)=>{\n            if (event.key === 'Escape' && userMenu.classList.contains('active')) userMenu.classList.remove('active');\n        });\n    }\n    // Functions to open and close the modal\n    const openModal = ()=>{\n        if (modal) {\n            modal.classList.remove('hidden');\n            modal.classList.add('flex'); // Use flex to center the content\n            // Set focus on the input field for better accessibility\n            setTimeout(()=>cityInput.focus(), 100);\n        }\n    };\n    const closeModal = ()=>{\n        if (modal) {\n            modal.classList.add('hidden');\n            modal.classList.remove('flex');\n        }\n    };\n    // Open modal when the search icon is clicked\n    if (openModalButton) openModalButton.addEventListener('click', (event)=>{\n        event.preventDefault(); // Prevent the link from navigating\n        openModal();\n    });\n    // Close modal with the 'X' button\n    if (closeModalButton) closeModalButton.addEventListener('click', closeModal);\n    // Close modal with the 'Cancel' button\n    if (cancelButton) cancelButton.addEventListener('click', closeModal);\n    // Close modal when clicking on the background overlay\n    if (modal) modal.addEventListener('click', (event)=>{\n        // If the click is on the modal background (not the panel), close it\n        if (event.target === modal) closeModal();\n    });\n    // Close modal when the 'Escape' key is pressed\n    document.addEventListener('keydown', (event)=>{\n        if (event.key === 'Escape' && !modal.classList.contains('hidden')) closeModal();\n    });\n    // Form Submission Logic\n    if (getWeatherButton) getWeatherButton.addEventListener('click', ()=>{\n        const cityName = cityInput.value.trim();\n        if (cityName) {\n            // TODO: Add your logic to fetch weather for the cityName\n            console.log(`Fetching weather for: ${cityName}`);\n            // You can close the modal after searching\n            closeModal();\n            // Clear the input for next time\n            cityInput.value = '';\n        } else {\n            // Optional: show an error or highlight the input\n            console.log('City name is empty.');\n            cityInput.focus();\n        }\n    });\n    const API_KEY = \"***\";\n    // First, get the latitude and longitude for the city\n    const geoUrl = `https://api.openweathermap.org/geo/1.0/direct?q=${city}&limit=1&appid=${API_KEY}`;\n    // Call getWeather API when the button is clicked\n    const weatherUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`;\n    function updateBackground(weatherCondition) {\n        glassRect.classList.remove('sunny', 'cloudy', 'partly-cloudy', 'rainy', 'snowy', 'night-sky', 'night-rainy-sky', 'night-cloudy-sky');\n        if (weatherCondition.includes('clear') && isDay) glassRect.classList.add('sunny');\n        else if (weatherCondition.includes('cloud')) glassRect.classList.add('cloudy');\n        else if (weatherCondition.includes('rain')) glassRect.classList.add('rainy');\n    }\n    let visitCount = localStorage.getItem('websiteVisitCount') || 0;\n    visitCount++;\n    localStorage.setItem('websiteVisitCount', visitCount);\n    document.getElementById('visitCount').textContent = visitCount;\n});\n\n//# sourceMappingURL=weather-dashboard.1dc3737a.js.map\n","document.addEventListener(\"DOMContentLoaded\", (event) => {\n  // Modal Elements\n  const modal = document.getElementById('search-modal');\n  const modalPanel = document.getElementById('modal-panel');\n  const openModalButton = document.getElementById('search-modal-trigger');\n  const closeModalButton = document.getElementById('modal-close-button');\n  const cancelButton = document.getElementById('modal-cancel-button');\n  const cityInput = document.getElementById('city-input');\n  const getWeatherButton = document.getElementById('get-weather-button');\n\n  // Weather space\n  const glassRect = document.querySelector('.glass-rectangle');\n  const dashboardContainer = document.querySelector('.dashboard-container');\n\n  // Date and Time Display\n  const currentDateTimeElement = document.getElementById('current-date-time');\n\n  function updateDateTime() {\n    const now = new Date();\n\n    // Format the date: e.g., \"July 12, 2025\"\n    const dateOptions = {month: 'long', day: 'numeric', year: 'numeric'};\n    const formattedDate = now.toLocaleDateString('en-GB', dateOptions);\n\n    // Format the time: e.g., \"03:30\"\n    const timeOptions = {hour: '2-digit', minute: '2-digit', second: '2-digit', hour24: true};\n    const formattedTime = now.toLocaleTimeString('en-GB', timeOptions);\n\n    if (currentDateTimeElement) {\n      currentDateTimeElement.textContent = `${formattedDate} | ${formattedTime}`;\n    }\n  }\n\n  // Update the time immediately when the page loads\n  updateDateTime();\n  // Then, update the time every second (1000 milliseconds)\n  setInterval(updateDateTime, 1000);\n\n  const userMenu = document.querySelector('.user-menu');\n\n  if (userMenu) {\n    const userProfileButton = userMenu.querySelector('.user-profile-button');\n\n    userProfileButton.addEventListener('click', (event) => {\n      // Stop the click from bubbling up to the document, which would close the menu\n      event.stopPropagation();\n      // Toggle the 'active' class to show/hide the dropdown\n      userMenu.classList.toggle('active');\n    });\n\n    // Add a listener to the whole document to close the menu if you click elsewhere\n    document.addEventListener('click', () => {\n      if (userMenu.classList.contains('active')) {\n        userMenu.classList.remove('active');\n      }\n    });\n\n    // Optional but recommended: Close the dropdown with the 'Escape' key\n    document.addEventListener('keydown', (event) => {\n      if (event.key === 'Escape' && userMenu.classList.contains('active')) {\n        userMenu.classList.remove('active');\n      }\n    });\n  }\n\n  // Functions to open and close the modal\n  const openModal = () => {\n    if (modal) {\n      modal.classList.remove('hidden');\n      modal.classList.add('flex'); // Use flex to center the content\n      // Set focus on the input field for better accessibility\n      setTimeout(() => cityInput.focus(), 100);\n    }\n  };\n\n  const closeModal = () => {\n    if (modal) {\n      modal.classList.add('hidden');\n      modal.classList.remove('flex');\n    }\n  };\n\n  // Open modal when the search icon is clicked\n  if (openModalButton) {\n    openModalButton.addEventListener('click', (event) => {\n      event.preventDefault(); // Prevent the link from navigating\n      openModal();\n    });\n  }\n\n  // Close modal with the 'X' button\n  if (closeModalButton) {\n    closeModalButton.addEventListener('click', closeModal);\n  }\n\n  // Close modal with the 'Cancel' button\n  if (cancelButton) {\n    cancelButton.addEventListener('click', closeModal);\n  }\n\n  // Close modal when clicking on the background overlay\n  if (modal) {\n    modal.addEventListener('click', (event) => {\n      // If the click is on the modal background (not the panel), close it\n      if (event.target === modal) {\n        closeModal();\n      }\n    });\n  }\n\n  // Close modal when the 'Escape' key is pressed\n  document.addEventListener('keydown', (event) => {\n    if (event.key === 'Escape' && !modal.classList.contains('hidden')) {\n      closeModal();\n    }\n  });\n\n  // Form Submission Logic\n  if (getWeatherButton) {\n    getWeatherButton.addEventListener('click', () => {\n      const cityName = cityInput.value.trim();\n      if (cityName) {\n        // TODO: Add your logic to fetch weather for the cityName\n        console.log(`Fetching weather for: ${cityName}`);\n        // You can close the modal after searching\n        closeModal();\n        // Clear the input for next time\n        cityInput.value = '';\n      } else {\n        // Optional: show an error or highlight the input\n        console.log('City name is empty.');\n        cityInput.focus();\n      }\n    });\n  }\n\n  const API_KEY = \"***\";\n\n  // First, get the latitude and longitude for the city\n  const geoUrl = `https://api.openweathermap.org/geo/1.0/direct?q=${city}&limit=1&appid=${API_KEY}`;\n\n  // Call getWeather API when the button is clicked\n  const weatherUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`;\n\n  function updateBackground(weatherCondition) {\n\n    glassRect.classList.remove('sunny', 'cloudy', 'partly-cloudy', 'rainy', 'snowy', 'night-sky', 'night-rainy-sky', 'night-cloudy-sky');\n    if (weatherCondition.includes('clear') && isDay) {\n      glassRect.classList.add('sunny');\n    } else if (weatherCondition.includes('cloud')) {\n      glassRect.classList.add('cloudy');\n    } else if (weatherCondition.includes('rain')) {\n      glassRect.classList.add('rainy');\n    }\n  }\n\n  let visitCount = localStorage.getItem('websiteVisitCount') || 0;\n  visitCount++;\n  localStorage.setItem('websiteVisitCount', visitCount);\n  document.getElementById('visitCount').textContent = visitCount;\n});\n"],"names":["document","addEventListener","event","modal","getElementById","openModalButton","closeModalButton","cancelButton","cityInput","getWeatherButton","querySelector","currentDateTimeElement","updateDateTime","now","Date","formattedDate","toLocaleDateString","month","day","year","formattedTime","toLocaleTimeString","hour","minute","second","hour24","textContent","setInterval","userMenu","userProfileButton","stopPropagation","classList","toggle","contains","remove","key","closeModal","add","preventDefault","setTimeout","focus","target","cityName","value","trim","console","log","city","lat","lon","visitCount","localStorage","getItem","setItem"],"version":3,"file":"weather-dashboard.1dc3737a.js.map"}